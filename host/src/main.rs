// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{
    EMULATOR_ELF, EMULATOR_ID
};
use risc0_zkvm::{default_prover, ExecutorEnv};

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();
/*
    let start_time = std::time::Instant::now();

    // we'll read the ROM into a string from a file at ../../gameboy/res/sml
    // this is the host so we have access to the file system
    // let rom: String = std::fs::read_to_string("sgameboy/res/sml.gb").unwrap().into();
    let mut rom = String::from("");
    {
        let mut ap = argparse::ArgumentParser::new();
        ap.set_description("Gameboy emulator");
        ap.refer(&mut rom)
            .add_argument("rom", argparse::Store, "The ROM file to run")
            .required();
        ap.parse_args_or_exit();
    }

    let rom = std::fs::read(&rom).unwrap();
*/
    let env = ExecutorEnv::builder()
        // .write(&rom)
        // .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    println!("proving...");

    // Produce a receipt by proving the specified ELF binary.
    let receipt = prover
        .prove(env, EMULATOR_ELF)
        .unwrap();

    println!("receipt...");
    // TODO: Implement code for retrieving receipt journal here.

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt
        .verify(EMULATOR_ID)
        .unwrap();
}
