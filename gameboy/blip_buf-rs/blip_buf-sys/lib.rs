#![allow(bad_style)]

#![no_std]
use core::ffi as libc;

/* automatically generated by rust-bindgen */

pub enum Struct_blip_t { }
pub type blip_t = Struct_blip_t;
pub type Enum_Unnamed1 = ::libc::c_uint;
pub const blip_max_ratio: ::libc::c_uint = 1048576;
pub type Enum_Unnamed2 = ::libc::c_uint;
pub const blip_max_frame: ::libc::c_uint = 4000;
pub type blip_buffer_t = blip_t;
extern "C" {
    pub fn blip_new(sample_count: ::libc::c_int) -> *mut blip_t;
    pub fn blip_set_rates(arg1: *mut blip_t, clock_rate: ::libc::c_double,
                          sample_rate: ::libc::c_double) -> ();
    pub fn blip_clear(arg1: *mut blip_t) -> ();
    pub fn blip_add_delta(arg1: *mut blip_t, clock_time: ::libc::c_uint,
                          delta: ::libc::c_int) -> ();
    pub fn blip_add_delta_fast(arg1: *mut blip_t, clock_time: ::libc::c_uint,
                               delta: ::libc::c_int) -> ();
    pub fn blip_clocks_needed(arg1: *const blip_t,
                              sample_count: ::libc::c_int) -> ::libc::c_int;
    pub fn blip_end_frame(arg1: *mut blip_t, clock_duration: ::libc::c_uint)
     -> ();
    pub fn blip_samples_avail(arg1: *const blip_t) -> ::libc::c_int;
    pub fn blip_read_samples(arg1: *mut blip_t, out: *mut ::libc::c_short,
                             count: ::libc::c_int, stereo: ::libc::c_int)
     -> ::libc::c_int;
    pub fn blip_delete(arg1: *mut blip_t) -> ();
}
