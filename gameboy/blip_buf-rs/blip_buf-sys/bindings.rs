/* automatically generated by rust-bindgen 0.69.4 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blip_t {
    _unused: [u8; 0],
}
extern "C" {
    #[doc = " Creates new buffer that can hold at most sample_count samples. Sets rates\nso that there are blip_max_ratio clocks per sample. Returns pointer to new\nbuffer, or NULL if insufficient memory."]
    pub fn blip_new(sample_count: ::core::ffi::c_int) -> *mut blip_t;
}
extern "C" {
    #[doc = " Sets approximate input clock rate and output sample rate. For every\nclock_rate input clocks, approximately sample_rate samples are generated."]
    pub fn blip_set_rates(arg1: *mut blip_t, clock_rate: f64, sample_rate: f64);
}
#[doc = " Maximum clock_rate/sample_rate ratio. For a given sample_rate,\nclock_rate must not be greater than sample_rate*blip_max_ratio."]
pub const blip_max_ratio: _bindgen_ty_1 = 1048576;
pub type _bindgen_ty_1 = ::core::ffi::c_uint;
extern "C" {
    #[doc = " Clears entire buffer. Afterwards, blip_samples_avail() == 0."]
    pub fn blip_clear(arg1: *mut blip_t);
}
extern "C" {
    #[doc = " Adds positive/negative delta into buffer at specified clock time."]
    pub fn blip_add_delta(arg1: *mut blip_t, clock_time: ::core::ffi::c_uint, delta: ::core::ffi::c_int);
}
extern "C" {
    #[doc = " Same as blip_add_delta(), but uses faster, lower-quality synthesis."]
    pub fn blip_add_delta_fast(arg1: *mut blip_t, clock_time: ::core::ffi::c_uint, delta: ::core::ffi::c_int);
}
extern "C" {
    #[doc = " Length of time frame, in clocks, needed to make sample_count additional\nsamples available."]
    pub fn blip_clocks_needed(arg1: *const blip_t, sample_count: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
#[doc = " Maximum number of samples that can be generated from one time frame."]
pub const blip_max_frame: _bindgen_ty_2 = 4000;
pub type _bindgen_ty_2 = ::core::ffi::c_uint;
extern "C" {
    #[doc = " Makes input clocks before clock_duration available for reading as output\nsamples. Also begins new time frame at clock_duration, so that clock time 0 in\nthe new time frame specifies the same clock as clock_duration in the old time\nframe specified. Deltas can have been added slightly past clock_duration (up to\nhowever many clocks there are in two output samples)."]
    pub fn blip_end_frame(arg1: *mut blip_t, clock_duration: ::core::ffi::c_uint);
}
extern "C" {
    #[doc = " Number of buffered samples available for reading."]
    pub fn blip_samples_avail(arg1: *const blip_t) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " Reads and removes at most 'count' samples and writes them to 'out'. If\n'stereo' is true, writes output to every other element of 'out', allowing easy\ninterleaving of two buffers into a stereo sample stream. Outputs 16-bit signed\nsamples. Returns number of samples actually read."]
    pub fn blip_read_samples(
        arg1: *mut blip_t,
        out: *mut ::core::ffi::c_short,
        count: ::core::ffi::c_int,
        stereo: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " Frees buffer. No effect if NULL is passed."]
    pub fn blip_delete(arg1: *mut blip_t);
}
pub type blip_buffer_t = blip_t;
